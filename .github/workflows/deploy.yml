name: Deploy to Development Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Set environment variables for testing
      run: |
        echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
        echo "POSTGRES_SERVER=localhost" >> $GITHUB_ENV
        echo "POSTGRES_DB=test_db" >> $GITHUB_ENV
        echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
    
    - name: Test application
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            from app.main import app
            from app.core.config import settings
            print('‚úÖ Application imports successfully')
            print(f'‚úÖ Database URI configured: {settings.DATABASE_URI[:50]}...')
        except Exception as e:
            print(f'‚ùå Import error: {e}')
            sys.exit(1)
        "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Development Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: 34.134.14.202
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /srv/servicios/entersys-backend || mkdir -p /srv/servicios/entersys-backend
          cd /srv/servicios/entersys-backend
          
          # Clone or pull latest changes
          if [ -d ".git" ]; then
            git pull origin main
          else
            git clone https://github.com/EntersysMX/entersys-backend.git .
          fi
          
          # Create .env file if it doesn't exist
          if [ ! -f ".env" ]; then
            cp .env.example .env
            sed -i 's/POSTGRES_PASSWORD=/POSTGRES_PASSWORD=entersys_dev_pass_2025/' .env
          fi
          
          # Stop existing containers
          docker-compose down || true
          
          # Build and start new containers
          docker-compose up -d --build
          
          # Wait for containers to be ready
          sleep 30
          
          # Check if containers are running
          docker-compose ps
          
          echo "üöÄ Deployment completed successfully!"