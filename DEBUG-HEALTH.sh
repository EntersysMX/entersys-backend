#!/bin/bash
# DEBUG-HEALTH.sh
# Diagn√≥stico espec√≠fico del health endpoint

echo "üîç DIAGN√ìSTICO ESPEC√çFICO DEL HEALTH ENDPOINT"
echo "============================================"

cd /srv/servicios/entersys-apis/content-management

echo "‚Ä¢ Logs recientes del contenedor:"
echo "================================"
docker logs entersys-content-api --tail 50

echo ""
echo "‚Ä¢ Variables de entorno en el contenedor:"
echo "======================================="
docker exec entersys-content-api env | grep -E "(POSTGRES|DATABASE|PYTHONPATH)" || echo "Sin variables relevantes"

echo ""
echo "‚Ä¢ Test directo del c√≥digo de health check desde dentro del contenedor:"
echo "==================================================================="
docker exec entersys-content-api python << 'PYTHONCODE'
import os
import sys
print("üîß Ejecutando health check manualmente...")

# A√±adir el directorio app al path
sys.path.insert(0, '/app')

try:
    print("1. Importando m√≥dulos...")
    from sqlalchemy.orm import Session
    from sqlalchemy import text
    from app.db.session import SessionLocal
    print("   ‚úÖ M√≥dulos importados correctamente")
    
    print("2. Creando sesi√≥n de base de datos...")
    db = SessionLocal()
    print("   ‚úÖ Sesi√≥n creada")
    
    print("3. Ejecutando consulta SELECT 1...")
    result = db.execute(text("SELECT 1"))
    print(f"   ‚úÖ Consulta exitosa: {result.fetchone()}")
    
    print("4. Cerrando sesi√≥n...")
    db.close()
    print("   ‚úÖ Sesi√≥n cerrada")
    
    print("üéâ Health check manual EXITOSO")
    
except Exception as e:
    print(f"‚ùå Error en health check manual: {e}")
    import traceback
    traceback.print_exc()
PYTHONCODE

echo ""
echo "‚Ä¢ Test de importaci√≥n espec√≠fica del endpoint de health:"
echo "======================================================"
docker exec entersys-content-api python << 'PYTHONCODE'
import sys
sys.path.insert(0, '/app')

try:
    print("Importando health endpoint...")
    from app.api.v1.endpoints.health import check_health, get_db
    print("‚úÖ Health endpoint importado correctamente")
    
    print("Probando funci√≥n get_db...")
    db_gen = get_db()
    db = next(db_gen)
    print("‚úÖ Generador de DB funciona")
    
    # Simular el health check
    print("Ejecutando check_health...")
    from sqlalchemy import text
    db.execute(text("SELECT 1"))
    print("‚úÖ Health check simulado funciona")
    
    db.close()
    
except Exception as e:
    print(f"‚ùå Error importando/ejecutando health: {e}")
    import traceback
    traceback.print_exc()
PYTHONCODE

echo ""
echo "‚Ä¢ Test directo del endpoint HTTP:"
echo "==============================="
docker exec entersys-content-api python << 'PYTHONCODE'
import urllib.request
import urllib.error
import json

try:
    print("Haciendo request a health endpoint...")
    request = urllib.request.Request('http://localhost:8000/api/v1/health')
    request.add_header('Content-Type', 'application/json')
    
    try:
        response = urllib.request.urlopen(request, timeout=10)
        data = response.read().decode('utf-8')
        print(f"‚úÖ Status: {response.getcode()}")
        print(f"‚úÖ Response: {data}")
    except urllib.error.HTTPError as e:
        error_data = e.read().decode('utf-8')
        print(f"‚ùå HTTP Error {e.code}")
        print(f"‚ùå Error response: {error_data}")
        
        # Intentar parsear el JSON del error
        try:
            error_json = json.loads(error_data)
            print("üìã Error detallado:", error_json)
        except:
            print("üìã Error no es JSON v√°lido")
            
except Exception as e:
    print(f"‚ùå Error general: {e}")
PYTHONCODE

echo ""
echo "‚Ä¢ Verificando estructura de archivos de la aplicaci√≥n:"
echo "===================================================="
docker exec entersys-content-api find /app -name "*.py" | head -10

echo ""
echo "‚Ä¢ Test de conectividad b√°sica de la aplicaci√≥n:"
echo "=============================================="
docker exec entersys-content-api python << 'PYTHONCODE'
import urllib.request

endpoints_to_test = [
    'http://localhost:8000/',
    'http://localhost:8000/docs', 
    'http://localhost:8000/api/v1/health'
]

for endpoint in endpoints_to_test:
    try:
        response = urllib.request.urlopen(endpoint, timeout=5)
        print(f"‚úÖ {endpoint} -> {response.getcode()}")
    except urllib.error.HTTPError as e:
        print(f"‚ùå {endpoint} -> HTTP {e.code}")
    except Exception as e:
        print(f"‚ùå {endpoint} -> {str(e)[:50]}...")
PYTHONCODE

echo ""
echo "‚úÖ DIAGN√ìSTICO HEALTH COMPLETADO"
echo ""
echo "üí° Revisar los resultados arriba para identificar el problema espec√≠fico"